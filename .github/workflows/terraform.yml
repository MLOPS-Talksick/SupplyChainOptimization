name: Deploy Airflow with Terraform

on:
  push:
    branches: [testing-service-account-terraform]
  workflow_dispatch:
    inputs:
      deployment_target:
        description: "Where to deploy Airflow"
        required: true
        default: "compute_engine"
        type: choice
        options:
          - local
          - compute_engine

jobs:
  # -------------------------------------------------------------
  # ðŸŸ¦ Job 1: BOOTSTRAP - creates SA and key
  # -------------------------------------------------------------
  bootstrap:
    name: Bootstrap Terraform Setup
    runs-on: ubuntu-latest

    env:
      GCP_PROJECT_ID: primordial-veld-450618-n4
      GCP_LOCATION: us-central1
      TF_VAR_gcp_service_account_key: ${{ secrets.BOOTSTRAP_GCP_KEY }}

    outputs:
      service_account_key: ${{ steps.export-key.outputs.key }}
      service_account_email: ${{ steps.export-email.outputs.service_account_email }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Authenticate with Google Cloud (bootstrap)
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.BOOTSTRAP_GCP_KEY }}
          create_credentials_file: true
          export_environment_variables: true

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Init (bootstrap)
        working-directory: bootstrap
        run: terraform init

      - name: Import existing resources if any
        run: |
          chmod +x scripts/tf_import_bootstrap.sh
          ./scripts/tf_import_bootstrap.sh

      - name: Terraform Apply (bootstrap)
        working-directory: bootstrap
        run: terraform apply -auto-approve

      - name: Copy service account key from local_file
        working-directory: bootstrap
        run: |
          if [ ! -f ./sa_key.json ]; then
            echo "ERROR: bootstrap/sa_key.json not found!"
            ls -la .
            exit 1
          fi
          cp ./sa_key.json ../key.json


      - name: Copy service account email from local_file
        working-directory: bootstrap
        run: |
          if [ ! -f ./sa_email.txt ]; then
            echo "ERROR: bootstrap/sa_email.txt not found!"
            ls -la .
            exit 1
          fi
          cp ./sa_email.txt ../sa_email.txt

      # - name: Export service account key to output
      #   id: export-key
      #   run: |
      #     echo "key<<EOF" >> $GITHUB_OUTPUT
      #     cat $GITHUB_WORKSPACE/key.json >> $GITHUB_OUTPUT
      #     echo "EOF" >> $GITHUB_OUTPUT


      - name: Upload service account key artifact
        uses: actions/upload-artifact@v4
        with:
          name: sa-key
          path: key.json 
          retention-days: 1

      - name: Upload service account email artifact
        uses: actions/upload-artifact@v4
        with:
          name: sa-email
          path: sa_email.txt
          retention-days: 1

  # Job - 2: build and push
  build_and_push:
    name: Build and Push Docker Image
    needs: bootstrap
    runs-on: ubuntu-latest
    env:
      GCP_PROJECT_ID: primordial-veld-450618-n4
    outputs:
      model_serving_image_uri: ${{ steps.build-model-serving.outputs.model_serving_image_uri }}
      model_training_image_uri: ${{ steps.build-model-training.outputs.model_training_image_uri }}
      model_training_trigger_image_uri: ${{ steps.build-model-trigger.outputs.model_training_trigger_image_uri }}
      backend_image_uri: ${{ steps.build-backend.outputs.backend_image_uri }}


    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 2

      - name: Download service account key
        uses: actions/download-artifact@v4
        with:
          name: sa-key
          path: key-download

      - name: Export service account key for TF and Auth
        run: |
          echo "GOOGLE_APPLICATION_CREDENTIALS=$GITHUB_WORKSPACE/key-download/key.json" >> $GITHUB_ENV
          echo "TF_VAR_gcp_service_account_key=$(cat $GITHUB_WORKSPACE/key-download/key.json | jq -c .)" >> $GITHUB_ENV
        
      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ env.TF_VAR_gcp_service_account_key }}
          create_credentials_file: true
          export_environment_variables: true
          cleanup_credentials: true

      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker us-central1-docker.pkg.dev --quiet

      - name: Check if Docker Build is Needed for airflow.
        id: detect-changes-airflow-image
        run: |
          chmod +x scripts/check_docker_build.sh
          ./scripts/check_docker_build.sh

      - name: Build & Push Docker Image for airflow.
        if: steps.detect-changes-airflow-image.outputs.build_required == 'true'
        run: |
          chmod +x scripts/build_and_push.sh
          ./scripts/build_and_push.sh

      - name: Check if Docker Build is Needed for Cloud Run Model Training.
        id: detect-changes-model_training-image
        run: |
          chmod +x scripts/check_cloudrun_model_training_docker_build.sh
          ./scripts/check_cloudrun_model_training_docker_build.sh

      - name: Build & Push Docker Image for Model Training
        if: steps.detect-changes-model_training-image.outputs.build_required == 'true'
        id: build-model-training
        run: |
          chmod +x scripts/build_and_push_model_training_docker_image.sh
          ./scripts/build_and_push_model_training_docker_image.sh

      
      - name: Check if Docker Build is Needed for Cloud Run Model Serving.
        id: detect-changes-model_serving-image
        run: |
          chmod +x scripts/check_cloudrun_model_serving_docker_build.sh
          ./scripts/check_cloudrun_model_serving_docker_build.sh

      - name: Build & Push Docker Image for Cloud Run Model Serving.
        if: steps.detect-changes-model_serving-image.outputs.build_required == 'true'
        id: build-model-serving
        run: |
          chmod +x scripts/build_and_push_model_serving_docker_image.sh
          ./scripts/build_and_push_model_serving_docker_image.sh


      - name: Check if Docker Build is Needed for Cloud Run Training Trigger.
        id: detect-changes-model_training_trigger-image
        run: |
          chmod +x scripts/check_cloudrun_model_training_trigger_docker_build.sh
          ./scripts/check_cloudrun_model_training_trigger_docker_build.sh

      - name: Build & Push Docker Image for Training Trigger
        if: steps.detect-changes-model_training_trigger-image.outputs.build_required == 'true'
        id: build-model-trigger
        run: |
          chmod +x scripts/build_and_push_model_training_cloud_run_trigger_image.sh
          ./scripts/build_and_push_model_training_cloud_run_trigger_image.sh


      - name: Check if Docker Build is Needed for Cloud Run Backend
        id: detect-changes-backend-image
        run: |
          chmod +x scripts/check_cloudrun_backend_docker_build.sh
          ./scripts/check_cloudrun_backend_docker_build.sh

      - name: Build & Push Docker Image for Cloud Run Backend
        if: steps.detect-changes-backend-image.outputs.build_required == 'true'
        id: build-backend
        run: |
          chmod +x scripts/build_and_push_backend_docker_image.sh
          ./scripts/build_and_push_backend_docker_image.sh


      - name: Debug Docker Image URIs (Before Output)
        run: |
          echo "Model Serving Image URI: ${{ steps.build-model-serving.outputs.model_serving_image_uri }}"
          echo "Model Training Image URI: ${{ steps.build-model-training.outputs.model_training_image_uri }}"
          echo "Model Training Trigger Image URI: ${{ steps.build-model-trigger.outputs.model_training_trigger_image_uri }}"
          echo "Model Training Trigger Image URI: ${{ steps.build-backend.outputs.backend_image_uri }}"


  # -------------------------------------------------------------
  # ðŸŸ© Job 3: DEPLOY - uses key from bootstrap
  # -------------------------------------------------------------
  deploy:
    name: Deploy Infrastructure
    needs: [bootstrap, build_and_push]
    runs-on: ubuntu-latest

    env:
      GCP_PROJECT_ID: primordial-veld-450618-n4
      GCP_LOCATION: us-central1
      # TF_VAR_gcp_service_account_key: ${{ needs.bootstrap.outputs.service_account_key }}
      # TF_VAR_service_account_email: ${{ needs.bootstrap.outputs.service_account_email }}
      TF_VAR_model_serving_image_uri: ${{ needs.build_and_push.outputs.model_serving_image_uri }}
      TF_VAR_model_training_image_uri: ${{ needs.build_and_push.outputs.model_training_image_uri }}
      TF_VAR_model_training_trigger_image_uri: ${{ needs.build_and_push.outputs.model_training_trigger_image_uri }}
      TF_VAR_backend_image_uri: ${{ needs.build_and_push.outputs.backend_image_uri }}
      TF_VAR_postgres_user: ${{ secrets.POSTGRES_USER }}
      TF_VAR_postgres_password: ${{ secrets.POSTGRES_PASSWORD }}
      TF_VAR_postgres_db: ${{ secrets.POSTGRES_DB }}
      TF_VAR_airflow_database_password: ${{ secrets.AIRFLOW_DATABASE_PASSWORD }}
      TF_VAR_redis_password: ${{ secrets.REDIS_PASSWORD }}
      TF_VAR_airflow_fernet_key: ${{ secrets.AIRFLOW_FERNET_KEY }}
      TF_VAR_airflow_admin_username: ${{ secrets.AIRFLOW_ADMIN_USERNAME }}
      TF_VAR_airflow_admin_password: ${{ secrets.AIRFLOW_ADMIN_PASSWORD }}
      TF_VAR_airflow_admin_firstname: ${{ secrets.AIRFLOW_ADMIN_FIRSTNAME }}
      TF_VAR_airflow_admin_lastname: ${{ secrets.AIRFLOW_ADMIN_LASTNAME }}
      TF_VAR_airflow_admin_email: ${{ secrets.AIRFLOW_ADMIN_EMAIL }}
      TF_VAR_airflow_uid: ${{ secrets.AIRFLOW_UID }}
      TF_VAR_docker_gid: ${{ secrets.DOCKER_GID }}
      TF_VAR_mysql_host: ${{ secrets.MYSQL_HOST }}
      TF_VAR_mysql_user: ${{ secrets.MYSQL_USER }}
      TF_VAR_mysql_password: ${{ secrets.MYSQL_PASSWORD }}
      TF_VAR_mysql_database: ${{ secrets.MYSQL_DATABASE }}
      TF_VAR_api_token: ${{ secrets.API_TOKEN }}
      TF_VAR_model_name: ${{ secrets.MODEL_NAME }}
      TF_VAR_staging_bucket_uri: ${{ secrets.BUCKET_URI }}
      TF_VAR_project_number: ${{ secrets.PROJECT_NUMBER }}
      TF_VAR_instance_conn_name: ${{ secrets.INSTANCE_CONN_NAME }}
      TF_VAR_cloudrun_service_name: cloudrun-backend

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Download service account key
        uses: actions/download-artifact@v4
        with:
          name: sa-key
          path: key-download

      - name: Download SA email
        uses: actions/download-artifact@v4
        with:
          name: sa-email
          path: email-download

      - name: Debug SA Email Content
        run: |
          echo "Contents of sa_email.txt:"
          cat $GITHUB_WORKSPACE/email-download/sa_email.txt


      - name: Export service account key for TF and Auth
        run: |
          echo "GOOGLE_APPLICATION_CREDENTIALS=$GITHUB_WORKSPACE/key-download/key.json" >> $GITHUB_ENV
          echo "TF_VAR_gcp_service_account_key=$(cat $GITHUB_WORKSPACE/key-download/key.json | jq -c .)" >> $GITHUB_ENV
          EMAIL=$(cat $GITHUB_WORKSPACE/email-download/sa_email.txt)
          echo "TF_VAR_service_account_email=$EMAIL" >> $GITHUB_ENV

      - name: Debug Terraform Image Variables
        run: |
          echo "TF_VAR_model_serving_image_uri=${TF_VAR_model_serving_image_uri}"
          echo "TF_VAR_model_training_image_uri=${TF_VAR_model_training_image_uri}"
          echo "TF_VAR_model_training_trigger_image_uri=${TF_VAR_model_training_trigger_image_uri}"
          echo "TF_VAR_backend_image_uri=${TF_VAR_backend_image_uri}"


      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ env.TF_VAR_gcp_service_account_key }}
          create_credentials_file: true
          export_environment_variables: true
          cleanup_credentials: true

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1

      - name: Update gcloud components
        run: gcloud components update --quiet

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Init (deploy)
        working-directory: infrastructure
        run: terraform init

      - name: Terraform Plan
        run: |
          export TF_VAR_gcp_service_account_key="$(cat key-download/key.json | jq -c .)"
          export TF_VAR_service_account_email="$(cat $GITHUB_WORKSPACE/email-download/sa_email.txt)"
          cd infrastructure
          terraform plan \
            -var="project_id=${{ env.GCP_PROJECT_ID }}" \
            -var="region=${{ env.GCP_LOCATION }}"

      - name: Import existing resources if any
        run: |
          chmod +x scripts/tf_import_all.sh
          ./scripts/tf_import_all.sh

      - name: Terraform Apply (deploy)
        run: |
          export TF_VAR_gcp_service_account_key="$(cat $GITHUB_WORKSPACE/key-download/key.json | jq -c .)"
          export TF_VAR_service_account_email="$(cat $GITHUB_WORKSPACE/email-download/sa_email.txt)"
          cd infrastructure
          terraform apply -auto-approve \
            -var="project_id=${{ env.GCP_PROJECT_ID }}" \
            -var="region=${{ env.GCP_LOCATION }}"

      - name: Get Load Balancer IP
        run: |
          LB_IP=$(gcloud compute forwarding-rules list --filter="name:airflow-global-forwarding-rule" --format="value(IPAddress)")
          echo "Airflow UI is available at: http://$LB_IP"