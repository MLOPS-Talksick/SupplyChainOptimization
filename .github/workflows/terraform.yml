name: Deploy Airflow with Terraform

on:
  push:
    branches: "testing-service-account-terraform"
  workflow_dispatch:
    inputs:
      deployment_target:
        description: "Where to deploy Airflow"
        required: true
        default: "compute_engine"
        type: choice
        options:
          - local
          - compute_engine

jobs:
  bootstrap:
    name: Bootstrap - Create Service Account and Key
    runs-on: ubuntu-latest
    env:
      TF_VAR_bootstrap_gcp_key: ${{ secrets.BOOTSTRAP_GCP_KEY }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Terraform (bootstrap)
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Init (bootstrap)
        working-directory: bootstrap
        run: terraform init

      - name: Terraform Apply (bootstrap)
        working-directory: bootstrap
        run: terraform apply -auto-approve

      - name: Extract Service Account Key
        working-directory: bootstrap
        run: terraform output -raw terraform_sa_private_key > key.json

      - name: Upload Service Account Key Artifact
        uses: actions/upload-artifact@v4
        with:
          name: gcp-key
          path: bootstrap/key.json

  deploy:
    name: Deploy Infrastructure
    needs: bootstrap
    runs-on: ubuntu-latest
    env:
      GCP_PROJECT_ID: primordial-veld-450618-n4
      GCP_LOCATION: us-central1
      ARTIFACT_REGISTRY_NAME: airflow-docker-image
      REPO_FORMAT: DOCKER
      DOCKER_IMAGE_NAME: data-pipeline
      DOCKER_IMAGE_TAG: latest
      MACHINE_TYPE: e2-standard-4
      TF_VAR_postgres_user: ${{ secrets.POSTGRES_USER }}
      TF_VAR_postgres_password: ${{ secrets.POSTGRES_PASSWORD }}
      TF_VAR_postgres_db: ${{ secrets.POSTGRES_DB }}
      TF_VAR_airflow_database_password: ${{ secrets.AIRFLOW_DATABASE_PASSWORD }}
      TF_VAR_redis_password: ${{ secrets.REDIS_PASSWORD }}
      TF_VAR_airflow_fernet_key: ${{ secrets.AIRFLOW_FERNET_KEY }}
      TF_VAR_airflow_admin_username: ${{ secrets.AIRFLOW_ADMIN_USERNAME }}
      TF_VAR_airflow_admin_password: ${{ secrets.AIRFLOW_ADMIN_PASSWORD }}
      TF_VAR_airflow_admin_firstname: ${{ secrets.AIRFLOW_ADMIN_FIRSTNAME }}
      TF_VAR_airflow_admin_lastname: ${{ secrets.AIRFLOW_ADMIN_LASTNAME }}
      TF_VAR_airflow_admin_email: ${{ secrets.AIRFLOW_ADMIN_EMAIL }}
      TF_VAR_airflow_uid: ${{ secrets.AIRFLOW_UID }}
      TF_VAR_docker_gid: ${{ secrets.DOCKER_GID }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Download Service Account Key Artifact
        uses: actions/download-artifact@v4
        with:
          name: gcp-key
          path: key-artifact

      - name: Set TF_VAR_gcp_service_account_key and write key file
        run: |
          # Read the key from the downloaded artifact
          key=$(cat key-artifact/key.json)
          # Write the key to a temporary file for gcloud authentication
          printf '%s' "$key" > /tmp/gcp-key.json
          # Set the TF_VAR so Terraform can pick it up automatically
          echo "TF_VAR_gcp_service_account_key<<EOF" >> $GITHUB_ENV
          echo "$key" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV


      # - name: Write key file from env variable
      #   run: echo "$TF_VAR_gcp_service_account_key" > /tmp/gcp-key.json

      # - name: Authenticate with gcloud using key file
      #   run: gcloud auth activate-service-account --key-file=/tmp/gcp-key.json

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1

      - name: Update gcloud components
        run: gcloud components update --quiet

      - name: Set up Terraform (deploy)
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Init (deploy)
        working-directory: infrastructure
        run: terraform init

      - name: Terraform Plan
        run: terraform -chdir=infrastructure plan \
          -var="project_id=${{ env.GCP_PROJECT_ID }}" \
          -var="region=${{ env.GCP_LOCATION }}"

      - name: Import Existing Resources (if any)
        run: |
          chmod +x scripts/tf_import_all.sh
          ./scripts/tf_import_all.sh

      - name: Terraform Apply
        run: terraform -chdir=infrastructure apply -auto-approve \
          -var="project_id=${{ env.GCP_PROJECT_ID }}" \
          -var="region=${{ env.GCP_LOCATION }}"

      - name: Check if Docker Build is Needed
        id: detect-changes
        run: |
          chmod +x scripts/check_docker_build.sh
          ./scripts/check_docker_build.sh
          
      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker us-central1-docker.pkg.dev --quiet

      - name: Build & Push Docker Image
        if: steps.detect-changes.outputs.build_required == 'true'
        run: |
          chmod +x scripts/build_and_push.sh
          ./scripts/build_and_push.sh

      - name: Get Load Balancer IP
        run: |
          LB_IP=$(gcloud compute forwarding-rules list --filter="name:airflow-global-forwarding-rule" --format="value(IPAddress)")
          echo "Airflow UI is available at: http://$LB_IP"
