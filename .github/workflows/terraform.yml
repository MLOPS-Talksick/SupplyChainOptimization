name: Deploy Airflow with Terraform

on:
  push:
    branches: testing-service-account-terraform
  workflow_dispatch:
    inputs:
      deployment_target:
        description: "Where to deploy Airflow"
        required: true
        default: "compute_engine"
        type: choice
        options:
          - local
          - compute_engine

jobs:
  deploy:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    env:
      GCP_PROJECT_ID: primordial-veld-450618-n4
      GCP_LOCATION: us-central1
      ARTIFACT_REGISTRY_NAME: airflow-docker-image
      REPO_FORMAT: DOCKER
      DOCKER_IMAGE_NAME: data-pipeline
      DOCKER_IMAGE_TAG: latest
      MACHINE_TYPE: e2-standard-4
      # IMPORTANT: Provide the initial bootstrap key from your secret
      TF_VAR_bootstrap_gcp_key: ${{ secrets.BOOTSTRAP_GCP_KEY }}
      TF_VAR_postgres_user: ${{ secrets.POSTGRES_USER }}
      TF_VAR_postgres_password: ${{ secrets.POSTGRES_PASSWORD }}
      TF_VAR_postgres_db: ${{ secrets.POSTGRES_DB }}
      TF_VAR_airflow_database_password: ${{ secrets.AIRFLOW_DATABASE_PASSWORD }}
      TF_VAR_redis_password: ${{ secrets.REDIS_PASSWORD }}
      TF_VAR_airflow_fernet_key: ${{ secrets.AIRFLOW_FERNET_KEY }}
      TF_VAR_airflow_admin_username: ${{ secrets.AIRFLOW_ADMIN_USERNAME }}
      TF_VAR_airflow_admin_password: ${{ secrets.AIRFLOW_ADMIN_PASSWORD }}
      TF_VAR_airflow_admin_firstname: ${{ secrets.AIRFLOW_ADMIN_FIRSTNAME }}
      TF_VAR_airflow_admin_lastname: ${{ secrets.AIRFLOW_ADMIN_LASTNAME }}
      TF_VAR_airflow_admin_email: ${{ secrets.AIRFLOW_ADMIN_EMAIL }}
      TF_VAR_airflow_uid: ${{ secrets.AIRFLOW_UID }}
      TF_VAR_docker_gid: ${{ secrets.DOCKER_GID }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up Terraform (bootstrap)
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Init (bootstrap)
        working-directory: bootstrap
        run: terraform init

      - name: Terraform Apply (bootstrap)
        working-directory: bootstrap
        run: terraform apply -auto-approve

      # Instead of "terraform output -raw ...", copy the local_file's JSON:
      - name: Copy Service Account Key to GitHub workspace
        working-directory: bootstrap
        run: |
          # Confirm the file was created
          if [ ! -f sa_key.json ]; then
            echo "Error: The service account key file (sa_key.json) does not exist!"
            exit 1
          fi

          # Copy it to your GitHub workspace
          cp sa_key.json $GITHUB_WORKSPACE/key.json

          # Provide the file path as an environment variable
          echo "GOOGLE_APPLICATION_CREDENTIALS=$GITHUB_WORKSPACE/key.json" >> $GITHUB_ENV
          chmod 600 $GITHUB_WORKSPACE/key.json

      - name: Debug full key.json content
        run: |
          echo "=== key.json contents ==="
          cat $GITHUB_WORKSPACE/key.json
          echo "=== End of key.json ==="


      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_file: ${{ env.GOOGLE_APPLICATION_CREDENTIALS }}



      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1

      - name: Update gcloud components
        run: gcloud components update --quiet

      - name: Set up Terraform (deploy)
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Init (deploy)
        working-directory: infrastructure
        run: terraform init

      - name: Terraform Plan
        run: terraform -chdir=infrastructure plan \
          -var="project_id=${{ env.GCP_PROJECT_ID }}" \
          -var="region=${{ env.GCP_LOCATION }}"

      - name: Import existing resources if any
        run: |
          chmod +x scripts/tf_import_all.sh
          ./scripts/tf_import_all.sh

      - name: Terraform Apply (deploy)
        run: terraform -chdir=infrastructure apply -auto-approve \
          -var="project_id=${{ env.GCP_PROJECT_ID }}" \
          -var="region=${{ env.GCP_LOCATION }}"

      - name: Check if Docker Build is Needed
        id: detect-changes
        run: |
          chmod +x scripts/check_docker_build.sh
          ./scripts/check_docker_build.sh

      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker us-central1-docker.pkg.dev --quiet

      - name: Build & Push Docker Image
        if: steps.detect-changes.outputs.build_required == 'true'
        run: |
          chmod +x scripts/build_and_push.sh
          ./scripts/build_and_push.sh

      - name: Get Load Balancer IP
        run: |
          LB_IP=$(gcloud compute forwarding-rules list --filter="name:airflow-global-forwarding-rule" --format="value(IPAddress)")
          echo "Airflow UI is available at: http://$LB_IP"
