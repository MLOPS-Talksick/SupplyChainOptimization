name: Data-Pipeline

on:
  push:
    branches:
      - data-pipeline-deployment

jobs:
  setup:
    name: Install Dependencies & Cache
    runs-on: ubuntu-latest
    outputs:
      cache-hit: ${{ steps.cache-deps.outputs.cache-hit }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Cache Python Dependencies
        id: cache-deps
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('Data_Pipeline/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install Dependencies (if cache not found)
        if: steps.cache-deps.outputs.cache-hit != 'true'
        run: |
          python -m pip install --upgrade pip
          pip install -r Data_Pipeline/requirements.txt
          pip install unittest

  unit-tests:
    name: Run Unit Tests
    runs-on: ubuntu-latest
    needs: setup

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Restore Cached Dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('Data_Pipeline/requirements.txt') }}

      - name: Set PYTHONPATH
        run: echo "PYTHONPATH=$PYTHONPATH:$(pwd)/Data_Pipeline" >> $GITHUB_ENV

      - name: Run Unittest
        run: python -m unittest discover -s tests -p "test*.py"

  docker-compose:
    name: Run Docker Compose
    runs-on: ubuntu-latest
    needs: unit-tests

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set Up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Load Environment Variables
        run: |
          echo "AIRFLOW_UID=50000" >> $GITHUB_ENV
          echo "DOCKER_GID=1000" >> $GITHUB_ENV

      - name: Start Docker Compose
        run: docker-compose up -d --build

      - name: Verify Containers are Running
        run: docker ps -a
