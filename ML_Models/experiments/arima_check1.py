# -*- coding: utf-8 -*-
"""Arima_check1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QZWxMCnb_dv8yWxp3JgSU4oyysYIfBfp
"""

pip install pmdarima

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from statsmodels.tsa.arima.model import ARIMA
from pmdarima import auto_arima
from statsmodels.tsa.stattools import adfuller
from sklearn.metrics import mean_absolute_error, mean_squared_error

# Load and prepare data
df = pd.read_csv("/content/Cleaned_data_to_run_ML.csv", parse_dates=["Date"])
df = df.sort_values("Date").set_index("Date")
data = df["Total Quantity"]

# Train-test split
train, test = data.iloc[:-30], data.iloc[-30:]

# Improvement 1: Auto-tune (p, d, q) with auto_arima

model = auto_arima(
    train,
    seasonal=False,  # Disable seasonal components
    stepwise=True,   # Use stepwise search for efficiency
    suppress_warnings=True,
    trace=True       # Show search progress
)
print(model.summary())

# Get optimal parameters from auto_arima
p, d, q = model.order


# Improvement 2: Manual Seasonal Differencing (e.g., weekly seasonality)
# Apply differencing at seasonal lag (checking for 30days)
seasonal_lag = 7
train_diff = train.diff(seasonal_lag).dropna()

# Check stationarity after differencing
def check_stationarity(series):
    result = adfuller(series)
    print(f"ADF Statistic: {result[0]}")
    print(f"p-value: {result[1]}")
check_stationarity(train_diff)


# Improvement 3: Fit ARIMA with tuned parameters

model = ARIMA(train, order=(p, d, q))
model_fit = model.fit()


# Improvement 4: Validate residuals

# Residual diagnostics (should be white noise)
residuals = model_fit.resid
model_fit.plot_diagnostics(figsize=(10, 8))
plt.show()


# Forecast and evaluate

forecast = model_fit.forecast(steps=30)
mae = mean_absolute_error(test, forecast)
rmse = np.sqrt(mean_squared_error(test, forecast))
print(f"Optimized ARIMA - MAE: {mae:.2f}, RMSE: {rmse:.2f}")

# Plot results
plt.figure(figsize=(10, 6))
plt.plot(train.index, train, label="Train")
plt.plot(test.index, test, label="Test", color="green")
plt.plot(test.index, forecast, label="Forecast", color="red")
plt.title("Optimized ARIMA Forecast")
plt.legend()
plt.show()
